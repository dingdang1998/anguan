<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.oket.ccic.mapper.UserMapper">
    <resultMap id="User" type="com.oket.ccic.entity.User">
        <result property="id" column="id" javaType="java.lang.Integer"/>
        <result property="username" column="username" javaType="java.lang.String"/>
        <result property="password" column="password" javaType="java.lang.String"/>
        <result property="realName" column="realname" javaType="java.lang.String"/>
        <result property="phone" column="phone" javaType="java.lang.String"/>
        <result property="mailAddress" column="mail_address" javaType="java.lang.String"/>
        <result property="creatTime" column="create_time" javaType="java.util.Date"/>
        <result property="updateTime" column="update_time" javaType="java.util.Date"/>
        <result property="endTime" column="end_time" javaType="java.util.Date"/>
        <result property="lastLoginTime" column="last_login_time" javaType="java.util.Date"/>
        <result property="createrId" column="creater_id" javaType="java.lang.Integer"/>
        <result property="status" column="status" javaType="java.lang.Byte"/>
    </resultMap>
    <resultMap id="UserVo" type="com.oket.ccic.vo.UserVo" extends="User">
        <result property="companyId" column="company_id" javaType="java.lang.Integer"/>
        <result property="roleId" column="role_id" javaType="java.lang.Integer"/>
        <result property="companyName" column="company_name" javaType="java.lang.String"/>
        <result property="roleName" column="role_name" javaType="java.lang.String"/>
    </resultMap>
    <resultMap id="Role" type="com.oket.ccic.entity.Role">
        <result property="id" column="id" javaType="java.lang.Integer"/>
        <result property="roleName" column="role_name" javaType="java.lang.String"/>
        <result property="childrenIds" column="children_ids" javaType="java.lang.String"/>
    </resultMap>
    <insert id="addUser" keyProperty="id" useGeneratedKeys="true">
        insert into bd_user ( username, password, realname, phone, mail_address, create_time, end_time,
        creater_id, status
        )
        values (#{user.username,jdbcType=VARCHAR}, #{user.password,jdbcType=VARCHAR}, #{user.realName,jdbcType=TINYINT},
        #{user.phone,jdbcType=INTEGER}, #{user.mailAddress,jdbcType=TINYINT}, #{user.creatTime,jdbcType=TIMESTAMP},
        #{user.endTime,jdbcType=TINYINT}, #{user.createrId,jdbcType=TINYINT}, #{user.status,jdbcType=TINYINT}
        )
    </insert>
    <insert id="addUserCompanyRelation">
        insert into bd_user_company ( user_id, company_id
        )
        values (#{userId,jdbcType=INTEGER}, #{companyId,jdbcType=INTEGER})
    </insert>
    <insert id="addUserRoleRelation">
        insert into bd_user_role ( user_id, role_id
        )
        values (#{userId,jdbcType=INTEGER}, #{roleId,jdbcType=INTEGER})
    </insert>
    <update id="updateUser">
        update bd_user
        <set>
            <if test="user.mailAddress != null">
                mail_address = #{user.mailAddress,jdbcType=VARCHAR},
            </if>
            <if test="user.phone != null">
                phone = #{user.phone,jdbcType=VARCHAR},
            </if>
            <if test="user.realName != null">
                realname = #{user.realName,jdbcType=TINYINT},
            </if>
            <if test="user.updateTime != null">
                update_time = #{user.updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="user.endTime != null">
                end_time = #{user.endTime,jdbcType=TIMESTAMP},
            </if>
        </set>
        where id = #{user.id,jdbcType=INTEGER}
    </update>
    <update id="updateUserCompanyRelation">
        update bd_user_company set company_id = #{companyId} where user_id = #{userId}
    </update>
    <update id="updateUserRoleRelation">
        update bd_user_role set role_id = #{roleId} where user_id = #{userId}
    </update>
    <update id="updateUserStatus">
        update bd_user set status = #{status} where id = #{userId}
    </update>
    <update id="updateLastLoginTime">
        update bd_user set last_login_time = #{now} where id = #{userId}
    </update>
    <update id="updatePassword">
        update bd_user set password = #{password} where username = #{username}
    </update>
    <select id="checkUserName" resultType="java.lang.Integer">
        select count(*) from bd_user where username = #{userName}
    </select>
    <select id="getPage" resultMap="UserVo">
        select u.*,c.company_name as company_name,c.id as company_id,r.role_name as role_name,r.id as role_id
        from bd_user u
        left join bd_user_company uc on uc.user_id = u.id
        left join bd_company c on uc.company_id = c.id
        left join bd_user_role ur on ur.user_id = u.id
        left join bd_role r on ur.role_id = r.id
        where 1=1
        and r.id != 1
        and r.id != 4
        <if test="companyId !=null">
            and c.id = #{companyId}
        </if>
        <if test="userName !=null and userName != ''">
            and u.username like concat('%',#{userName},'%')
        </if>
        <if test="userId !=null">
            and u.id != #{userId}
        </if>
        <if test="pageNum!=null and pageSize!=null">
            limit #{pageNum},#{pageSize}
        </if>
    </select>
    <select id="getPageTotal" resultType="java.lang.Long">
        select count(*)
        from bd_user u
        left join bd_user_company uc on uc.user_id = u.id
        left join bd_company c on uc.company_id = c.id
        where 1=1
        <if test="companyId !=null">
            and c.id = #{companyId}
        </if>
        <if test="userName !=null and userName != ''">
            and u.username = #{userName}
        </if>
    </select>
    <select id="getUserVoByUsername" resultMap="UserVo">
        select u.*,c.company_name as company_name,c.id as company_id,r.role_name as role_name,r.id as role_id
        from bd_user u
        left join bd_user_company uc on uc.user_id = u.id
        left join bd_company c on uc.company_id = c.id
        left join bd_user_role ur on ur.user_id = u.id
        left join bd_role r on ur.role_id = r.id
        where
            u.username = #{userName}
    </select>
    <select id="getRolesById" resultMap="Role">
        select * from bd_role where id in
        <foreach item="roleId" index="index" collection="roleIds" open="(" separator="," close=")">
            #{roleId, jdbcType=INTEGER}
        </foreach>
    </select>
    <select id="getRoleChildrenIds" resultType="java.lang.String">
        select children_ids from bd_role where id = #{roleId}
    </select>
    <select id="checkMailAddress" resultType="java.lang.Integer">
        select count(*) from bd_user where mail_address = #{mailAddress}
    </select>
    <select id="getUserNumByCompanyId" resultType="java.lang.Integer">
        select count(*) from bd_user u
        left join bd_user_company uc on u.id = uc.user_id
        where uc.company_id = #{companyId}
    </select>
    <select id="getMailAddressByUserName" resultType="java.lang.String">
        select mail_address from bd_user where username = #{username}
    </select>
    <select id="getPasswordByUserId" resultType="java.lang.String">
        select password from bd_user where id = #{userId}
    </select>
    <select id="getUserByUserId" resultMap="User">
        select * from bd_user where id = #{userId}
    </select>
    <select id="getAdminByCompanyId" resultMap="User">
        SELECT
			u.*
		FROM
			bd_user u
			LEFT JOIN bd_user_company uc ON u.id = uc.user_id
			LEFT JOIN bd_user_role ur ON u.id = ur.user_id
		WHERE
			uc.company_id = #{companyId}
			AND (ur.role_id = 2 or ur.role_id = 3)
    </select>
</mapper>